# Generated by Django 5.1.6 on 2025-07-10 13:58 (or your version)

from django.db import migrations, models
from core.models import Skill, Category  # Import the models for the new fields
from OBSP.models import OBSPCriteria  # Import for data migration

def migrate_data(apps, schema_editor):
    OBSPCriteriaModel = apps.get_model('OBSP', 'OBSPCriteria')  # Get the historical model
    for criteria in OBSPCriteriaModel.objects.all():  # Loop through your existing objects
        # Convert from the renamed old fields (e.g., old_required_skills_json)
        if hasattr(criteria, 'old_required_skills_json') and criteria.old_required_skills_json:
            for skill_name in criteria.old_required_skills_json:  # e.g., a list of strings
                try:
                    skill = apps.get_model('core', 'Skill').objects.get(name=skill_name)  # Use historical model
                    criteria.required_skills.add(skill)  # Add to the new ManyToMany field
                except apps.get_model('core', 'Skill').DoesNotExist:
                    print(f"Skill '{skill_name}' not found for criteria {criteria.id} - skipping")
        
        # Convert core_skills
        if hasattr(criteria, 'old_core_skills_json') and criteria.old_core_skills_json:
            for skill_name in criteria.old_core_skills_json:
                try:
                    skill = apps.get_model('core', 'Skill').objects.get(name=skill_name)
                    criteria.core_skills.add(skill)
                except apps.get_model('core', 'Skill').DoesNotExist:
                    print(f"Skill '{skill_name}' not found for criteria {criteria.id} - skipping")
        
        # Convert optional_skills
        if hasattr(criteria, 'old_optional_skills_json') and criteria.old_optional_skills_json:
            for skill_name in criteria.old_optional_skills_json:
                try:
                    skill = apps.get_model('core', 'Skill').objects.get(name=skill_name)
                    criteria.optional_skills.add(skill)
                except apps.get_model('core', 'Skill').DoesNotExist:
                    print(f"Skill '{skill_name}' not found for criteria {criteria.id} - skipping")
        
        # Convert required_domains
        if hasattr(criteria, 'old_required_domains_json') and criteria.old_required_domains_json:
            for domain_name in criteria.old_required_domains_json:  # e.g., a list of strings like ["creativity"]
                try:
                    category = apps.get_model('core', 'Category').objects.get(name=domain_name)
                    criteria.required_domains.add(category)
                except apps.get_model('core', 'Category').DoesNotExist:
                    print(f"Category '{domain_name}' not found for criteria {criteria.id} - skipping")
        
        criteria.save()  # Save the criteria with the new relationships

class Migration(migrations.Migration):
    dependencies = [
        ('OBSP', '0011_obsplevel_max_revisions_obspresponse_max_revisions'),
        ('core', '0008_alter_milestone_status'),
    ]

    operations = [
        # Step 1: Rename the old fields to avoid conflicts
        migrations.RenameField(
            model_name='obspcriteria',
            old_name='required_skills',  # Old JSON field
            new_name='old_required_skills_json',
        ),
        migrations.RenameField(
            model_name='obspcriteria',
            old_name='core_skills',
            new_name='old_core_skills_json',
        ),
        migrations.RenameField(
            model_name='obspcriteria',
            old_name='optional_skills',
            new_name='old_optional_skills_json',
        ),
        migrations.RenameField(
            model_name='obspcriteria',
            old_name='required_domains',
            new_name='old_required_domains_json',
        ),
        
        # Step 2: Add the new ManyToMany fields
        migrations.AddField(
            model_name='obspcriteria',
            name='required_skills',
            field=models.ManyToManyField(blank=True, help_text='Required skills for this criteria', related_name='required_in_criteria', to='core.skill'),
        ),
        migrations.AddField(
            model_name='obspcriteria',
            name='core_skills',
            field=models.ManyToManyField(blank=True, help_text='Core skills for this criteria', related_name='core_in_criteria', to='core.skill'),
        ),
        migrations.AddField(
            model_name='obspcriteria',
            name='optional_skills',
            field=models.ManyToManyField(blank=True, help_text='Optional skills for this criteria', related_name='optional_in_criteria', to='core.skill'),
        ),
        migrations.AddField(
            model_name='obspcriteria',
            name='required_domains',
            field=models.ManyToManyField(blank=True, help_text='Required domains for this criteria', related_name='required_in_criteria', to='core.category'),
        ),
        
        # Step 3: Run the data migration
        migrations.RunPython(migrate_data),
        
        # Step 4: Remove the renamed old fields
        migrations.RemoveField(
            model_name='obspcriteria',
            name='old_required_skills_json',
        ),
        migrations.RemoveField(
            model_name='obspcriteria',
            name='old_core_skills_json',
        ),
        migrations.RemoveField(
            model_name='obspcriteria',
            name='old_optional_skills_json',
        ),
        migrations.RemoveField(
            model_name='obspcriteria',
            name='old_required_domains_json',
        ),
    ]
